//////////////////////////
==== Git and Bazaar
//////////////////////////
==== Git과 Bazaar

//////////////////////////
Among the DVCS, another famous one is http://bazaar.canonical.com/[Bazaar].
Bazaar is free and open source, and is part of the http://www.gnu.org/[GNU Project].
It behaves very differently from Git.
Sometimes, to do the same thing as with Git, you have to use a different keyword, and some keywords that are common don't have the same meaning.
In particular, the branch management is very different and may cause confusion, especially when someone comes from Git's universe.
Nevertheless, it is possible to work on a Bazaar repository from a Git one.
//////////////////////////
DCVS 중에 다른 유명한 것으로 http://bazaar.canonical.com/[Bazaar] 라는 것이 있다.
Bazaar는 무료이고 오픈소스로 http://www.gnu.org/[GNU 프로젝트] 중 하나이다.
Git과 동작방식이 매우 다르다.
Git과 동일한 동작을 하기 위해 매우 다를 키워드를 사용하기도 하며, 같은 키워드가 전혀 다른 의미로 쓰이기도 한다.
특히 브랜치 관리에 대한 개념이 매우 달라 Git을 쓰던 사람에게는 매우 혼란스럽기도 하다.
그럼에도 불구하고 Git 클라이언트를 사용하여 Bazaar의 저장소를 기반으로 버전관리 작업을 할 수 있다.

//////////////////////////
There are many projects that allow you to use Git as a Bazaar client.
Here we'll use Felipe Contreras' project that you may find at https://github.com/felipec/git-remote-bzr[].
To install it, you just have to download the file git-remote-bzr in a folder contained in your `$PATH`:
//////////////////////////
여러분이 Git을 Bazaar 클라이언트로 사용하도록 기능을 제공해주는 수 많은 프로젝트가 있다.
이 책에서는 Felipe Contreras의 프로젝트를 가져다 사용하며 https://github.com/felipec/git-remote-bzr[] 에서 구할 수 있다.
프로젝트에서 git-remote-bzr 파일을 받아 `$PATH`에 지정된 디렉토리 중 하나에 위치시켜 두면 바로 사용할 수 있다.
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

//////////////////////////
You also need to have Bazaar installed.
That's all!
//////////////////////////
물론 Bazaar는 설치되어 있어야 한다.
이로서 준비 작업은 끝이다.

//////////////////////////
===== Create a Git repository from a Bazaar repository
//////////////////////////
===== Bazaar 저장소로부터 Git 저장소 생성

//////////////////////////
It is simple to use.
It is enough to clone a Bazaar repository prefixing it by `bzr::`.
Since Git and Bazaar both do full clones to your machine, it's possible to attach a Git clone to your local Bazaar clone, but it isn't recommended.
It's much easier to attach your Git clone directly to the same place your Bazaar clone is attached to ‒ the central repository.
//////////////////////////
Bazaar 저장소를 로컬로 Clone 하기는 쉽다.
저장소 주소 앞에 `bzr::` 문자열을 붙여서 Clone 하면 된다.
Git과 Bazaar 모두 저장소 전체를 로컬로 복제하여 사용하기 때문에 로컬에 이미 내려받은 Bazaar 저장소를 Clone 해 올 수도 있지만 권장하지는 않는다.
Bazaar 저장소가 가리키고 있는 원래의 리모트 저장소로부터 직접 Clone 하는 것이 여러모로 편리하다.

//////////////////////////
Let's suppose that you worked with a remote repository which is at address `bzr+ssh://developer@mybazaarserver:myproject`.
Then you must clone it in the following way:
//////////////////////////
리모트 저장소의 주소가 다음과 같이 ssh를 사용하는 경우 `bzr+ssh://developer@mybazaarserver:myproject`
Clone 할 때의 주소는 다음과 같다.
[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

//////////////////////////
At this point, your Git repository is created but it is not compacted for optimal disk use.
That's why you should also clean and compact your Git repository, especially if it is a big one:
//////////////////////////
Clone을 하고 나면 Git 저장소가 생성되었지만 디스크 사용에 있어서 최적화 된 상태는 아니다.
저장소 크기가 제법 큰 경우 다음 명령으로 Git 저장소의 디스크 사용을 최적화 시킬 수 있다.
[source,console]
----
$ git gc --aggressive
----

//////////////////////////
===== Bazaar branches
//////////////////////////
===== Bazaar 브랜치

//////////////////////////
Bazaar only allows you to clone branches, but a repository may contain several branches, and `git-remote-bzr` can clone both.
For example, to clone a branch:
//////////////////////////
Bazaar의 경우 저장소에는 많은 브랜치가 있더라도 Clone 할 때는 브랜치 하나만을 Clone 할 수 있다. 하지만 `git-remote-bzr` 명령은 두 가지 방식 다 사용 가능하다. 예를 들어 브랜치 하나만 Clone 하려면:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

//////////////////////////
And to clone the whole repository:
//////////////////////////
저장소 전체를 Clone 하려면:
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

//////////////////////////
The second command clones all the branches contained in the emacs repository; nevertheless, it is possible to point out some branches:
//////////////////////////
두 번째 명령을 실행하면 emacs 저장소의 모든 브랜치를 Clone 하게 된다. 일부 브랜치만 Clone 하거나 사용하도록 다음과 같이 설정할 수도 있다.
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

//////////////////////////
Some remote repositories don't allow you to list their branches, in which case you have to manually specify them, and even though you could specify the configuration in the cloning command, you may find this easier:
//////////////////////////
어떤 리모트 저장소의 경우 브랜치의 목록을 보여주지 않을수도 있지만 아래와 같이 직접 지정해준다면
어렵지 않게 지정된 브랜치를 포함하는 저장소 단위로 Clone 할 수 있다.

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

//////////////////////////
===== Ignore what is ignored with .bzrignore
//////////////////////////
===== .bzrignore로 무시하는 파일 Git에서도 무시하기

//////////////////////////
Since you are working on a project managed with Bazaar, you shouldn't create a `.gitignore` file because you _may_ accidentally set it under version control and the other people working with Bazaar would be disturbed.
The solution is to create the `.git/info/exclude` file either as a symbolic link or as a regular file.
We'll see later on how to solve this question.
//////////////////////////
Bazaar로 관리하는 저장소에서 작업하는 경우 `.gitignore` 파일을 운영하지 말아야 한다. 이 파일이 생성되어 버전관리에 추가된다면 Bazaar를 사용하는 다른 동료를 방해하는 꼴이다.
이를 해결하기 위해 `.git/info/exclude` 파일에 내용을 입력하거나 링크로 생성하는 방법이 있다.
자세한 내용은 이어지는 부분에서 확인할 수 있다.

//////////////////////////
Bazaar uses the same model as Git to ignore files, but also has two features which don't have an equivalent into Git.
The complete description may be found in http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[the documentation].
The two features are:
//////////////////////////
Bazaar의 파일 무시하기 기능은 Git의 무시하기 기능과 같은 방식으로 동작한다. 하지만 정확히 같은 것은 아니며 두 가지 기능이 Git과 다르게 동작한다.
정확한 전체 내용은 http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[ignore 도움말] 에서 확인할 수 있다.
두 가지 다른점은 다음과 같다.

//////////////////////////
1. "!!" allows you to ignore certain file patterns even if they're specified using a "!" rule.
2. "RE:" at the beginning of a line allows you to specify a https://docs.python.org/3/library/re.html[Python regular expression] (Git only allows shell globs).
//////////////////////////
1. "!!" 문자열로 시작하는 패턴은 이미 "!" 문자열로 시작하는 정의한 패턴을 강제로 다시 적용시키는 규칙이다. (무시하지 않는 것을 다시 무시하기!)
2. "RE:" 문자열로 시작하는 규칙은 https://docs.python.org/3/library/re.html[Python 정규표현식] 을 적용한다. Git은 Glob 패턴만 적용 가능하다.

//////////////////////////
As a consequence, there are two different situations to consider:
//////////////////////////
이러한 Bazaar 파일 무시하기 규칙을 Git 저장소 관리에도 적용하려면:

//////////////////////////
1. If the `.bzrignore` file does not contain any of these two specific prefixes, then you can simply make a symbolic link to it in the repository: `ln -s .bzrignore .git/info/exclude`
2. Otherwise, you must create the `.git/info/exclude` file and adapt it to ignore exactly the same files in `.bzrignore`.
//////////////////////////
1. `.bzrignore` 파일이 위의 두 가지 Git과 다른 규칙을 사용하지 않고 있다면 간단히 심볼릭 링크를 만들어 Git 저장소에도 적용할 수 있다: `ln -s .bzrignore .git/info/exclude`
2. 반대의 경우 `.git/info/exclude` 파일을 일반 파일로 생성하거나 수정해서 `.bzrignore` 파일과 같은 의미가 적용되도록 직접 수정해야 한다.

//////////////////////////
Whatever the case is, you will have to remain vigilant against any change of `.bzrignore` to make sure that the `.git/info/exclude` file always reflects `.bzrignore`.
Indeed, if the `.bzrignore` file were to change and contained one or more lines starting with "!!" or "RE:", Git not being able to interpret these lines, you'll have to adapt your `.git/info/exclude` file to ignore the same files as the ones ignored with `.bzrignore`.
Moreover, if the `.git/info/exclude` file was a symbolic link, you'll have to first delete the symbolic link, copy `.bzrignore` to `.git/info/exclude` and then adapt the latter.
However, be careful with its creation because with Git it is impossible to re-include a file if a parent directory of that file is excluded.
//////////////////////////
어떤 경우에도 `.git/info/exclude` 파일이 `.bzrignore` 파일이 변경됨에 따라 적절하게 내용을 반영하고 있는지 주의를 기울여 살펴봐야 한다.
"!!" 패턴이나 "RE:" 패턴 규칙이 새로이 `.bzrignore` 파일에 적용된 변경이 있을 수 있다. 이렇게 Git이 적절히 처리할 수 없는 패턴이 새로이 생겨난 경우 `.git/info/exclude` 파일을 일반파일로 작성하고 패턴의 내용을 이해한 다음 적절히 변환하여 Git 패턴으로 작성해야 한다.
`.git/info/exclude` 파일은 심볼릭 링크였으므로 일단 이를 지우는 것 부터 반드시 실행해야 한다. 그 이후 `.bzrignore` 파일을 `.git/info/exclude` 파일로 복사하고 Git이 이해하지 못하는 패턴에 대해 변경 작업을 해야 한다.
"!!" 패턴의 경우 Git에는 적용이 불가능하기 때문에 주의해서 이를 변환해야 한다.

//////////////////////////
===== Fetch the changes of the remote repository
//////////////////////////
===== 리모트 저장소로부터 변경 내용 가져오기

//////////////////////////
To fetch the changes of the remote, you pull changes as usually, using Git commands.
Supposing that your changes are on the `master` branch, you merge or rebase your work on the `origin/master` branch:
//////////////////////////
원격 저장소로부터 변경 내용을 가져오려면 보통의 Git 명령을 사용하듯 Pull 명령을 사용한다.
로컬의 변경 내용이 `master` 브랜치에 있다면 `origin/master` 브랜치를 Merge 하거나 다음과 같이 Rebase 하게 된다.
[source,console]
----
$ git pull --rebase origin
----

//////////////////////////
===== Push your work on the remote repository
//////////////////////////
===== 리모트 저장소로 변경 내용 보내기

//////////////////////////
Because Bazaar also has the concept of merge commits, there will be no problem if you push a merge commit.
So you can work on a branch, merge the changes into `master` and push your work.
Then, you create your branches, you test and commit your work as usual.
You finally push your work to the Bazaar repository:
//////////////////////////
Bazaar에도 Merge 커밋에 대한 개념이 동일하게 있기 때문에 Merge 커밋을 Push 하는 것은 아무런 문제가 없다.
어떤 브랜치에서 작업을 하다가 `master` 브랜치로 Merge 하고 이를 Push 하는 것 물론 가능하다.
직접 생성한 브랜치를 Push 할 수도 있다.
브랜치를 만들고 테스트와 커밋을 만들고 Bazaar 원격 저장소로 Push 하면 된다.
[source,console]
----
$ git push origin master
----

//////////////////////////
===== Caveats
//////////////////////////
===== 주의

//////////////////////////
Git's remote-helpers framework has some limitations that apply.
In particular, these commands don't work:
//////////////////////////
Git의 리모트-헬퍼 프레임워크의 제약사항이 몇가지 적용된다.
특히 아래의 명령을 적용하기 불가능하다.

//////////////////////////
* git push origin :branch-to-delete (Bazaar can't accept ref deletions in this way.)
* git push origin old:new (it will push 'old')
* git push --dry-run origin branch (it will push)
//////////////////////////
* git push origin :branch-to-delete (Bazaar 에서는 이런식으로 Ref 또는 브랜치 삭제가 불가능)
* git push origin old:new ('old' 브랜치를 Push 하게 됨)
* git push --dry-run origin branch (실제로 Push 하게 됨)

//////////////////////////
===== Summary
//////////////////////////
===== 요약

//////////////////////////
Since Git's and Bazaar's models are similar, there isn't a lot of resistance when working across the boundary.
As long as you watch out for the limitations, and are always aware that the remote repository isn't natively Git, you'll be fine.
//////////////////////////
Git과 Bazaar의 버전관리 모델이 매우 닮아있기 때문에 둘의 경계를 넘나드는 작업은 그리 어려운 것은 아니다.
하지만 아무런 제약사항이 없는 것은 아니기 때문에 Git을 Client로 사용할 때 항상 원격 저장소가 Bazaar 임을 생각해두고 사용한다면 무리는 없을 것이다.
